###########
# BUILDER #
###########

# pull official base image
FROM python:3.11.3-slim-bullseye as builder

# set work directory
WORKDIR /app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PATH="${PATH}:/root/.local/bin"

# install system dependencies
RUN set -eux; \
    export DEBIAN_FRONTEND=noninteractive; \
    apt-get update; \
    apt-get -y upgrade; \
    apt-get install --no-install-recommends curl gcc make -y; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/*; \
    curl -sSL https://install.python-poetry.org | python3 -

COPY poetry.lock .
COPY pyproject.toml .

# install dependencies
RUN poetry export --without-hashes --without dev --format=requirements.txt > /app/requirements.txt
RUN pip install --upgrade pip
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels/ -r /app/requirements.txt


########
# FINAL #
########

# pull official base image
FROM python:3.11.2-slim-buster

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup --system app && adduser --system --group app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV ENVIRONMENT prod
ENV TESTING 0

# install system dependencies
RUN set -eux; \
    export DEBIAN_FRONTEND=noninteractive; \
    apt-get update; \
    apt-get -y upgrade; \
    apt-get install --no-install-recommends curl gcc make -y; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/*

## install python dependencies
COPY --from=builder /app/wheels /wheels
COPY --from=builder /app/requirements.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*
#
## chown all the files to the app user
COPY --chown=app . $APP_HOME
RUN chmod +x $APP_HOME/start.sh
#
## change to the app user
USER app
#
CMD ["./start.sh"]